/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * WMS API (Warehouse Management System)
 * API for managing contractors and storage requests
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  ContractorDetails,
  ContractorStatusUpdate,
  ContractorsSummaryCollection,
  StorageRequestCreate,
  StorageRequestDetails,
  StorageRequestStatusUpdate,
  StorageRequestSummary
} from '.././contract';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class ContractAPIService {
  constructor(
    private http: HttpClient,
  ) {}/**
 * @summary List contractors
 */
 getContractors<TData = ContractorsSummaryCollection>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getContractors<TData = ContractorsSummaryCollection>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getContractors<TData = ContractorsSummaryCollection>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getContractors<TData = ContractorsSummaryCollection>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/wms/api/contractors`,options
    );
  }
/**
 * @summary Get contractor details
 */
 getContractorsId<TData = ContractorDetails>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getContractorsId<TData = ContractorDetails>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getContractorsId<TData = ContractorDetails>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getContractorsId<TData = ContractorDetails>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/wms/api/contractors/${id}`,options
    );
  }
/**
 * @summary Update contractor status
 */
 patchContractorsId<TData = void>(
    id: string,
    contractorStatusUpdate: ContractorStatusUpdate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    patchContractorsId<TData = void>(
    id: string,
    contractorStatusUpdate: ContractorStatusUpdate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    patchContractorsId<TData = void>(
    id: string,
    contractorStatusUpdate: ContractorStatusUpdate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;patchContractorsId<TData = void>(
    id: string,
    contractorStatusUpdate: ContractorStatusUpdate, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.patch<TData>(
      `http://localhost:8080/wms/api/contractors/${id}`,
      contractorStatusUpdate,options
    );
  }
/**
 * @summary List storage requests
 */
 getStorageRequests<TData = StorageRequestSummary[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getStorageRequests<TData = StorageRequestSummary[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getStorageRequests<TData = StorageRequestSummary[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getStorageRequests<TData = StorageRequestSummary[]>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/wms/api/storage-requests`,options
    );
  }
/**
 * @summary Create storage request
 */
 postStorageRequests<TData = StorageRequestDetails>(
    storageRequestCreate: StorageRequestCreate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    postStorageRequests<TData = StorageRequestDetails>(
    storageRequestCreate: StorageRequestCreate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    postStorageRequests<TData = StorageRequestDetails>(
    storageRequestCreate: StorageRequestCreate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;postStorageRequests<TData = StorageRequestDetails>(
    storageRequestCreate: StorageRequestCreate, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `http://localhost:8080/wms/api/storage-requests`,
      storageRequestCreate,options
    );
  }
/**
 * @summary Get storage request details
 */
 getStorageRequestsId<TData = StorageRequestDetails>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getStorageRequestsId<TData = StorageRequestDetails>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getStorageRequestsId<TData = StorageRequestDetails>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getStorageRequestsId<TData = StorageRequestDetails>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/wms/api/storage-requests/${id}`,options
    );
  }
/**
 * @summary Update storage request status
 */
 patchStorageRequestsId<TData = void>(
    id: string,
    storageRequestStatusUpdate: StorageRequestStatusUpdate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    patchStorageRequestsId<TData = void>(
    id: string,
    storageRequestStatusUpdate: StorageRequestStatusUpdate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    patchStorageRequestsId<TData = void>(
    id: string,
    storageRequestStatusUpdate: StorageRequestStatusUpdate, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;patchStorageRequestsId<TData = void>(
    id: string,
    storageRequestStatusUpdate: StorageRequestStatusUpdate, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.patch<TData>(
      `http://localhost:8080/wms/api/storage-requests/${id}`,
      storageRequestStatusUpdate,options
    );
  }
};

